# SPDX-FileCopyrightText: 2021 iteratec GmbH
#
# SPDX-License-Identifier: Apache-2.0

name: "CI"
on: push

env:
  # ---- Language Versions ----

  GO_VERSION: "1.15"
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "14"
  NPM_VERSION: "7"

  # ---- Docker Namespace ----

  # DOCKER_USER and DOCKER_TOKEN are stored as GitHub secrets as well
  DOCKER_NAMESPACE: ${{ secrets.DOCKER_NAMESPACE }}

jobs:
  # ---- Unit-Test ----

  # ---- Unit-Test | Java ----

  unit-java:
    name: "Unit-Test | Java"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unit: ["persistence-defectdojo"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "11" # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - run: |
          cd hooks/${{ matrix.unit }}/hook/
          ./gradlew test

  # ---- Unit-Test | Python ----

  unit-python:
    name: "Unit-Test | Python"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unit: ["git-repo-scanner", "zap-advanced"]
    steps:
      - name: Checkout
        uses: actions/checkout/@v2

      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r scanners/${{ matrix.unit }}/scanner/requirements.txt

      - name: "Execute Tests"
        working-directory: scanners/${{ matrix.unit }}/scanner/
        run: |
          pip install pytest
          pytest --ignore-glob='*_local.py' --ignore=tests/docker

  # ---- Unit-Test | JavaScript ----

  unit-javascript:
    name: "Unit-Test | JavaScript"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@v2
        name: Setup Node
        with:
          node-version: ${{ env. NODE_VERSION }}

      - name: Update NPM
        run: npm i -g npm@${{ env.NPM_VERSION }}
      - name: "list files and folders"
        run: ls
      - name: "Install npm dependencies in all parser sub projects"
        run: |
          for dir in scanners/*/parser/
          do
              cd $dir
              if [ -f package.json ] && [ -f package-lock.json ]; then
                  echo "Installing dependencies for $dir"
                  npm ci
              fi
              # cd back
              cd -
          done
      - name: "Install npm dependencies in all hook sub projects"
        run: |
          for dir in hooks/*/hook
          do
              cd $dir
              if [ -f package.json ] && [ -f package-lock.json ]; then
                  echo "Installing dependencies for $dir"
                  npm ci
              fi
              # cd back
              cd -
          done
      - name: "Install npm test dependencies"
        run: |
          npm ci
          cd scanners/
          npm ci
          cd -
          cd hooks/
          npm ci
          cd -
          cd parser-sdk/nodejs
          npm ci
      - name: "Compile Typescript"
        run: |
          cd hooks/cascading-scans/hook
          npm ci
          npm run build
      - name: "Run tests & publish code coverage"
        uses: paambaati/codeclimate-action@v2.6.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: npm test -- --ci --colors --coverage --testPathIgnorePatterns=/integration-tests/

  # ---- Build Stage ----

  # ---- Build Stage | Operator & Lurker ----

  operator:
    name: "Build | Operator"
    needs:
      - unit-python
      - unit-javascript
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ["operator", "lurker"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Go Setup
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Lint Go Code
        run: |
          cd ${{ matrix.component }}/
          go fmt ./...
          go vet ./...

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ matrix.component }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      
      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_NAMESPACE }}/${{ matrix.component }}
          readme-filepath: ./${{ matrix.component }}/docs/README.DockerHub-Core.md

  # ---- Build Stage | AutoDiscovery ----

  auto-discovery-kubernetes:
    name: "AutoDiscovery | Kubernetes"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Go Setup
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Lint Go Code
        working-directory: ./auto-discovery/kubernetes
        run: |
          go fmt ./...
          go vet ./...

      - name: Test
        working-directory: ./auto-discovery/kubernetes/
        run: make test

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/auto-discovery-kubernetes
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./auto-discovery/kubernetes/
          file: ./auto-discovery/kubernetes/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      
      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_NAMESPACE }}/auto-discovery-kubernetes
          readme-filepath: ./auto-discovery/kubernetes/docs/README.DockerHub-Core.md

  # ---- Build Stage | SDK Matrix ----

  sdk:
    name: "Build | SDKs"
    needs:
      - unit-python
      - unit-javascript
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sdk:
          - parser-sdk
          - hook-sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ matrix.sdk }}-nodejs
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.sdk }}/nodejs
          file: ./${{ matrix.sdk }}/nodejs/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

# ---- New Makefile based CI Pipeline steps ----

  makefile-scanner:
    name: "Make Scanners"
    needs:
      - sdk
      - operator
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unit: ["amass"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Setup Node
        with:
          node-version: ${{ env. NODE_VERSION }}

      - name: Update NPM
        run: npm i -g npm@${{ env.NPM_VERSION }}

      - name: Install Dependencies
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make install-deps

      - name: Unit Tests
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make unit-tests

      - name: Set baseImageTag To commit Hash
        run: |
          echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/parser-${{ matrix.unit }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.unit }}/parser/
          file: ./scanners/${{ matrix.unit }}/parser/Dockerfile
          load: true
          build-args: |
            namespace=${{ env.DOCKER_NAMESPACE }}
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Export Docker Images
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make docker-export

      - name: "Start kind cluster"
        run: |
          kind version
          kind create cluster --wait 3m --image kindest/node:v1.22.0@sha256:b8bda84bb3a190e6e028b1760d277454a72267a5454b57db34437c34a588d047

      - name: "Inspect kind cluster"
        run: |
          kubectl config current-context
          kubectl get node

      - name: Kind Import Images
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make kind-import

      - name: Install Operator
        working-directory: ./operator
        run: |
          make helm-deploy

      - name: Deploy ${{ matrix.unit }}
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make deploy

      - name: Deploy Test Dependencies
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make deploy-test-deps

      - name: Start Integration Tests
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make integration-tests

  # ---- Build Stage | Matrix Hooks ----

  hooks:
    name: "Build | Hooks"
    needs: sdk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        hook:
          - cascading-scans
          - finding-post-processing
          - generic-webhook
          - notification
          - persistence-elastic
          - persistence-defectdojo
          - update-field
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/hook-${{ matrix.hook }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set baseImageTag to commit hash
        run: |
          echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./hooks/${{ matrix.hook }}/hook
          file: ./hooks/${{ matrix.hook }}/hook/Dockerfile
          build-args: |
            namespace=${{ env.DOCKER_NAMESPACE }}
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_NAMESPACE }}/hook-${{ matrix.hook }}
          readme-filepath: ./hooks/${{ matrix.hook }}/docs/README.DockerHub-Hook.md

  # ---- Build Stage | Matrix Parsers ----

  parsers:
    name: "Build | Parsers"
    needs: sdk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parser:
          - angularjs-csti-scanner
          - git-repo-scanner
          - gitleaks
          - kube-hunter
          - kubeaudit
          - ncrack
          - nikto
          - nmap
          - nuclei
          - screenshooter
          - ssh-scan
          - sslyze
          - test-scan
          - trivy
          - whatweb
          - typo3scan
          - wpscan
          - zap

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/parser-${{ matrix.parser }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set baseImageTag to commit hash
        run: |
          echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.parser }}/parser
          file: ./scanners/${{ matrix.parser }}/parser/Dockerfile
          build-args: |
            namespace=${{ env.DOCKER_NAMESPACE }}
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_NAMESPACE }}/parser-${{ matrix.parser }}
          readme-filepath: ./scanners/${{ matrix.parser }}/docs/README.DockerHub-Parser.md

  # ---- Build | Scanners ----

  # Note we only build images for scanner that don't provider official public container images

  # ---- Build | Scanners | Third Party Scanner ----

  # This Matrix should contain Third Party Scanners
  # The Tag for the Image should be the current version of the Scanner

  scanners-third-party:
    name: "Build | Third Party Scanner"
    needs:
      - unit-python
      - unit-javascript
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scanner:
          - angularjs-csti-scanner
          - gitleaks
          - kube-hunter
          - kubeaudit
          - ncrack
          - nmap
          - whatweb
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set ENV Var with Scanner Version
        uses: mikefarah/yq@v4.4.1
        # Notice: The current version of the scanner is provided via the Chart.yaml to ensure
        # there is only one place to edit the version of a scanner
        with:
          cmd: echo scannerVersion=$(yq e .appVersion scanners/${{ matrix.scanner }}/Chart.yaml) >> $GITHUB_ENV

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/scanner-${{ matrix.scanner }}
          tag-sha: true
          tag-custom-only: true
          tag-custom: ${{ env.scannerVersion }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.scanner }}/scanner
          file: ./scanners/${{ matrix.scanner }}/scanner/Dockerfile
          build-args: |
            scannerVersion=${{ env.scannerVersion }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_NAMESPACE }}/scanner-${{ matrix.scanner }}
          readme-filepath: ./scanners/${{ matrix.scanner }}/docs/README.DockerHub-Scanner.md

  # ---- Build | Scanners | Custom Scanner ----

  # This Section contains Scanners that are developed by the secureCodeBox project
  # The tag for these images will be the Semver of the release

  scanners-custom:
    name: "Build | Custom Scanner"
    needs:
      - unit-python
      - unit-javascript
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scanner:
          - git-repo-scanner
          - screenshooter
          - test-scan
          - zap-advanced
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/scanner-${{ matrix.scanner }}
          tag-sha: true
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set baseImageTag to commit hash
        run: |
          echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scanners/${{ matrix.scanner }}/scanner
          file: ./scanners/${{ matrix.scanner }}/scanner/Dockerfile
          build-args: |
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_NAMESPACE }}/scanner-${{ matrix.scanner }}
          readme-filepath: ./scanners/${{ matrix.scanner }}/docs/README.DockerHub-Scanner.md

  scanner-nikto:
    # This Scanner has to be build seperately because the official image is only on GitHub but not on DockerHub
    name: "Build | Scanner | Nikto"
    needs:
      - unit-python
      - unit-javascript
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout secureCodeBox
        uses: actions/checkout/@v2
        with:
          path: scb

      - name: "Checkout Nikto"
        uses: actions/checkout/@v2
        with:
          repository: "sullo/nikto"
          path: nikto

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build and Push Nikto to Local Registry
        uses: docker/build-push-action@v2
        with:
          context: ./nikto/
          file: ./nikto/Dockerfile
          push: true
          tags: localhost:5000/sullo/nikto:latest

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/scanner-nikto
          tag-sha: true
          tag-custom: 2.1.6
          tag-semver: |
            {{ version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set baseImageTag to commit hash
        run: |
          echo "baseImageTag=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ./scb/scanners/nikto/scanner
          file: ./scb/scanners/nikto/scanner/Dockerfile
          build-args: |
            baseImageTag=${{ env.baseImageTag }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_NAMESPACE }}/scanner-nikto
          readme-filepath: ./scb/scanners/nikto/docs/README.DockerHub-Scanner.md

  # ---- Integration Tests ----

  Integration-tests:
    name: Integration Tests | k8s ${{ matrix.k8sVersion }}
    needs:
      - operator
      - hooks
      - parsers
      - scanners-third-party
      - scanners-custom
      - scanner-nikto
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8sVersion:
          - v1.22.0@sha256:b8bda84bb3a190e6e028b1760d277454a72267a5454b57db34437c34a588d047
          - v1.21.1@sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6
          - v1.20.7@sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
          - v1.19.11@sha256:07db187ae84b4b7de440a73886f008cf903fcf5764ba8106a9fd5243d6f32729
    steps:
      - uses: actions/checkout@master
      - name: "Start kind cluster"
        run: |
          kind version
          kind create cluster --image kindest/node:${{ matrix.k8sVersion }} --wait 3m
      - name: "Inspect kind cluster"
        run: |
          kubectl config current-context
          kubectl get node

      # ---- Install Operator & Create Namespaces ----

      - name: "Install Operator"
        run: |
          # Namespace in which the scans for the tests will be executed
          kubectl create namespace integration-tests
          # Operator Namespace
          kubectl create namespace securecodebox-system
          # Install Operator using the images of the current commit
          helm -n securecodebox-system install securecodebox-operator ./operator/ --wait \
            --set="image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/operator" \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="lurker.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/lurker" \
            --set="lurker.image.tag=sha-$(git rev-parse --short HEAD)" \

      # ---- Operator Health Check ----

      - name: "Inspect Operator"
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Pods in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager
      - name: "Create 'demo-targets' namespace"
        run: "kubectl create namespace demo-targets"

      # ---- Install Test Dependencies ----

      - name: "Install Test Dependencies"
        run: |
          cd tests/integration/
          npm ci

      # ---- General Testing ----

      # This steps should include Integration tests which are not related to a Specific Scanner

      # ---- Gerneral Testing | Findings Validation ----

      - name: "Parser should fail on invalid Findings"
        run: |
          helm -n integration-tests install test-scan ./scanners/test-scan/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-test-scan" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-test-scan" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"  \
            --set="parser.env[1].name=PRODUCE_INVALID_FINDINGS" \
            --set-string="parser.env[1].value=true"
          cd tests/integration/
          npx jest --ci --color generic/findings-validation.test.js
          helm -n integration-tests uninstall test-scan

      # ---- General Testing | ReadAndWrite Hook ----

      - name: "Throws NoScanDefinition Error Integration Tests"
        run: |
          cd tests/integration/
          npx jest --ci --color generic/no-scan-definition-error.test.js
      - name: "Hooks (ReadAndWrite) Integration Tests"
        run: |
          helm -n integration-tests install update-category ./hooks/update-field/ \
            --set="hook.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/hook-update-field" \
            --set="hook.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="attribute.name=category" \
            --set="attribute.value=fancy-category"
          helm -n integration-tests install update-severity ./hooks/update-field/ \
            --set="hook.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/hook-update-field" \
            --set="hook.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="attribute.name=severity" \
            --set="attribute.value=high"
          helm -n integration-tests install test-scan ./scanners/test-scan/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-test-scan" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-test-scan" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color generic/read-write-hook.test.js
          helm -n integration-tests uninstall test-scan update-category update-severity

      # ---- Gerneral Testing | ReadOnly Hook ----

      - name: "Hooks (ReadOnly) Integration Tests"
        run: |
          helm -n integration-tests install test-scan ./scanners/test-scan/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-test-scan" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-test-scan" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          helm -n integration-tests install http-webhook ./demo-targets/http-webhook
          helm -n integration-tests install ro-hook ./hooks/generic-webhook/ \
            --set="hook.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/hook-generic-webhook" \
            --set="webhookUrl=http://http-webhook/hallo-welt" \
            --set="hook.image.tag=sha-$(git rev-parse --short HEAD)"
          cd tests/integration/
          npx jest --ci --color generic/read-only-hook.test.js
          helm -n integration-tests uninstall test-scan http-webhook ro-hook

      # ---- Install Demo Apps for Specific Tests ----

      - name: "Install Demo Apps"
        run: |
          # Install dummy-ssh app
          helm -n demo-targets install dummy-ssh ./demo-targets/dummy-ssh/ --set="fullnameOverride=dummy-ssh" --wait
          # Install unsafe-https app
          helm -n demo-targets install unsafe-https ./demo-targets/unsafe-https/ --set="fullnameOverride=unsafe-https" --wait
          # Install bodgeit app
          helm -n demo-targets install bodgeit ./demo-targets/bodgeit/ --set="fullnameOverride=bodgeit" --wait
          # Install bodgeit app
          helm -n demo-targets install petstore ./demo-targets/swagger-petstore/ --set="fullnameOverride=petstore" --wait
          # Install old-wordpress app
          helm -n demo-targets install old-wordpress ./demo-targets/old-wordpress/ --set="fullnameOverride=old-wordpress" --wait
          # Install juiceshop app
          helm -n demo-targets install juiceshop ./demo-targets/juice-shop/ --set="fullnameOverride=juiceshop" --wait
          # Install plain nginx server
          kubectl create deployment --image nginx:alpine nginx --namespace demo-targets
          kubectl expose deployment nginx --port 80 --namespace demo-targets

      # ---- gitleaks Integration Tests ----

      - name: "gitleaks Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install gitleaks ./scanners/gitleaks/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-gitleaks" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-gitleaks" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/gitleaks.test.js

      # ---- Kubehunter Integration Tests ----

      - name: "kube-hunter Integration Tests"
        run: |
          helm -n integration-tests install kube-hunter ./scanners/kube-hunter/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-kube-hunter" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-kube-hunter" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/kube-hunter.test.js

      # ---- Kubeaudit Integration Tests ----

      - name: "kubeaudit Integration Tests"
        run: |
          kubectl create namespace kubeaudit-tests
          helm -n kubeaudit-tests install juice-shop ./demo-targets/juice-shop/ --wait
          helm -n integration-tests install kubeaudit ./scanners/kubeaudit/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-kubeaudit" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-kubeaudit" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="kubeauditScope=cluster" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/kubeaudit.test.js
          kubectl delete namespace kubeaudit-tests

      # ---- Ncrack Integration Tests ----

      - name: "ncrack Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install ncrack ./scanners/ncrack/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-ncrack" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-ncrack" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/ncrack.test.js

      # ---- Nikto Integration Tests ----

      - name: "nikto Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install nikto ./scanners/nikto/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-nikto" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-nikto" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/nikto.test.js

      # ---- Nmap Integration Tests ----

      - name: "nmap Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install nmap ./scanners/nmap/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-nmap" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-nmap" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/nmap.test.js

      # ---- Notification Hook Tests ----

      - name: "Notification Hook Tests"
        run: |
          helm -n integration-tests install test-scan ./scanners/test-scan/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-test-scan" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-test-scan" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          helm -n integration-tests install http-webhook ./demo-targets/http-webhook --wait

          helm -n integration-tests install notification-hook ./hooks/notification --values tests/integration/hooks/__testFiles__/notification-values.yaml \
            --set="hook.image.repository=docker.io/${{env.DOCKER_NAMESPACE }}/hook-notification" \
            --set="hook.image.tag=sha-$(git rev-parse --short HEAD)"

          cd tests/integration/
          npx jest --ci --color ./hooks/notification.test.js
          helm -n integration-tests uninstall test-scan http-webhook notification-hook

      # ---- SSH_SCAN Integration Tests ----

      - name: "ssh-scan Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install ssh-scan ./scanners/ssh-scan/  \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-ssh-scan" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/ssh-scan.test.js

      # ---- SSLyze Integration Tests ----

      - name: "sslyze Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install sslyze ./scanners/sslyze/  \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-sslyze" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/sslyze.test.js

      # ---- Whatweb Integration Tests ----

      - name: "Whatweb Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install whatweb ./scanners/whatweb/  \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-whatweb" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/whatweb.test.js

      # ---- WPScan Integration Tests ----

      - name: "WPScan Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install wpscan ./scanners/wpscan/ \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-wpscan" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/wpscan.test.js

      # ---- Zap Integration Tests ----

      - name: "ZAP Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install zap ./scanners/zap/  \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-zap" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          cd tests/integration/
          npx jest --ci --color scanner/zap.test.js

      # ---- Zap Extended Integration Tests ----

      - name: "ZAP Extended Integration Tests"
        # disable zap extended test temporarily as they slow down the pipeline too much
        if: ${{ false }}
        run: |
          kubectl -n integration-tests delete scans --all
          helm -n integration-tests install zap-advanced ./scanners/zap-advanced/  \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-zap" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-zap-advanced" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          kubectl apply -f ./scanners/zap-advanced/examples/integration-tests/scantype-configMap.yaml -n integration-tests
          cd tests/integration/
          npx jest --ci --color scanner/zap-advanced.test.js

      # ---- Cascading Scans ncrack Integration Test ----

      - name: "cascading Scans ncrack Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          # We'll run these in a separate namespace so that only the cascadingRules we want to test will be used
          kubectl create namespace cascading-tests
          # Install cascading-scans hook
          helm upgrade --install dssh ./hooks/cascading-scans/ -n cascading-tests \
            --set="hook.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/hook-cascading-scans" \
            --set="hook.image.tag=sha-$(git rev-parse --short HEAD)"
          # Install nmap
          helm -n cascading-tests install nmap ./scanners/nmap/ \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-nmap" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-nmap" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          # Install ncrack
          printf "root\nadmin\n" > users.txt
          printf "THEPASSWORDYOUCREATED\n123456\npassword\n" > passwords.txt
          kubectl create secret generic --from-file users.txt --from-file passwords.txt ncrack-lists -n cascading-tests
          cat <<EOF | helm -n cascading-tests install ncrack ./scanners/ncrack \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-ncrack" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-ncrack" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true" \
            --values -
          scanner:
            extraVolumes:
              - name: ncrack-lists
                secret:
                  secretName: ncrack-lists
            extraVolumeMounts:
              - name: ncrack-lists
                mountPath: "/ncrack/"
          EOF
          # Actually run the tests
          cd tests/integration/
          npx jest --ci --color scanner/cascade-nmap-ncrack.test.js
          # Clean up:
          kubectl -n cascading-tests delete scans --all
          kubectl delete namespace cascading-tests

      # ---- Cascading Scans SSLyze Integration Tests ----

      - name: "cascading Scans sslyze Integration Tests"
        run: |
          kubectl -n integration-tests delete scans --all
          # We'll run these in a separate namespace so that only the cascadingRules we want to test will be used
          kubectl create namespace cascading-tests
          # Install cascading-scans hook
          helm upgrade --install dssh ./hooks/cascading-scans/ -n cascading-tests --wait \
            --set="hook.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/hook-cascading-scans" \
            --set="hook.image.tag=sha-$(git rev-parse --short HEAD)"
          # Install unsafe-https
          helm upgrade --install unsafe-https ./demo-targets/unsafe-https/ -n cascading-tests --wait
          # Install nmap
          helm -n cascading-tests install nmap ./scanners/nmap/ --wait \
            --set="scanner.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/scanner-nmap" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-nmap" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          # Install sslyze
          helm -n cascading-tests install sslyze ./scanners/sslyze/ --wait \
            --set="parser.image.repository=docker.io/${{ env.DOCKER_NAMESPACE }}/parser-sslyze" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"
          # Actually run the tests
          cd tests/integration/
          npx jest --ci --color scanner/cascade-nmap-sslyze.test.js
          # Clean up:
          kubectl -n cascading-tests delete scans --all
          kubectl delete namespace cascading-tests

      # ---- Debuging Cluster on Failure ----

      - name: Inspect Post Failure
        if: failure()
        run: |
          echo "List all 'HelmCharts' in all namespaces"
          helm list --all-namespaces
          echo "List all 'Scans' in all namespaces"
          kubectl -n integration-tests get scan -o wide --all-namespaces
          echo "List all 'Jobs' in all namespaces"
          kubectl -n integration-tests get jobs -o wide --all-namespaces
          echo "List all 'Pods' in all namespaces"
          kubectl -n integration-tests get pods -o wide --all-namespaces
          echo "List all 'Services' in all namespaces"
          kubectl -n integration-tests get services -o wide --all-namespaces

      - name: "Inspect Operator"
        if: failure()
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager

      # ---- Clean UP ----

      - name: "Delete kind cluster"
        run: |
          kind delete cluster
