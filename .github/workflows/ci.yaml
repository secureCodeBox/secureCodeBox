# SPDX-FileCopyrightText: the secureCodeBox authors
#
# SPDX-License-Identifier: Apache-2.0

name: "CI"
on:
  push:
    branches:
      - main
      - v[0-9]+.x
  pull_request:
  schedule:
    - cron: "15 2 * * *" # Nightly-Build at 2:15 AM UTC

# The CI runs on ubuntu-20.04; More info about the installed software is found here:
# https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md

env:
  # ---- Language Versions ----

  GO_VERSION: "1.19"
  PYTHON_VERSION: "3.8.10"
  NODE_VERSION: "16"
  NPM_VERSION: "8.19.2"

jobs:
  # ---- Unit-Test ----

  # ---- Unit-Test | Java ----

  unit-java:
    name: "Unit-Test | Java"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        unit: ["persistence-defectdojo"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "17" # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - run: |
          cd hooks/${{ matrix.unit }}/hook/
          ./gradlew test

  # ---- Build Stage ----

  # ---- Build Stage | Operator & Lurker ----

  operator:
    name: "Build | Operator"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        component: ["operator", "lurker"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Go Setup
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Lint Go Code
        working-directory: ./${{ matrix.component }}
        run: |
          go fmt ./...
          go vet ./...

      - name: Build Container Image
        working-directory: ./operator
        run: make docker-build

      - name: Export Container Image
        working-directory: ./operator
        run: make docker-export-${{ matrix.component }}

      - name: Upload Image As Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.component }}-image
          path: ./operator/${{ matrix.component }}.tar
          retention-days: 1

  # ---- Build Stage | AutoDiscovery ----

  auto-discovery-kubernetes:
    name: "AutoDiscovery | Kubernetes"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Go Setup
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Lint Go Code
        working-directory: ./auto-discovery/kubernetes
        run: |
          go fmt ./...
          go vet ./...

      - name: Test
        working-directory: ./auto-discovery/kubernetes/
        run: make test

      - name: Build Container Image
        working-directory: ./auto-discovery/kubernetes/
        run: make docker-build

      - name: Export Container Image
        working-directory: ./auto-discovery/kubernetes/
        run: make docker-export

      - name: Upload Image As Artifact
        uses: actions/upload-artifact@v2
        with:
          name: auto-discovery-image
          path: ./auto-discovery/kubernetes/auto-discovery-kubernetes.tar
          retention-days: 1

  # ---- Build Stage | SDK Matrix ----

  sdk:
    name: "Build | SDKs"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        sdk:
          - parser-sdk
          - hook-sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Image
        working-directory: ./${{ matrix.sdk }}/nodejs
        run: make docker-build-sdk

      - name: Export Image
        working-directory: ./${{ matrix.sdk }}/nodejs
        run: make docker-export-sdk

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.sdk }}-image
          path: ./${{ matrix.sdk }}/nodejs/${{ matrix.sdk }}.tar
          retention-days: 1

  # ---- Test | Scanners ----

  test-scanners:
    name: "Test |  Scanner ${{ matrix.unit }}"
    needs:
      - sdk
      - operator
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        unit:
          - amass
          - angularjs-csti-scanner
          - cmseek
          - ffuf
          - git-repo-scanner
          - gitleaks
          - kubeaudit
          - kube-hunter
          - ncrack
          - nikto
          - nmap
          - nuclei
          - screenshooter
          - semgrep
          - ssh-scan
          - sslyze
          - trivy
          - typo3scan
          - whatweb
          - wpscan
          - zap
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Setup Node
        with:
          node-version: ${{ env. NODE_VERSION }}

      - name: Update NPM
        run: npm i -g npm@${{ env.NPM_VERSION }}

      - name: Install Dependencies
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make install-deps

      - name: Unit Tests
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make unit-tests

      - name: Download Parser SDK Image
        uses: actions/download-artifact@v2
        with:
          name: parser-sdk-image
          path: /tmp

      - name: Load Parser SDK Image
        run: |
          docker load --input /tmp/parser-sdk.tar
          docker images | grep sdk

      - name: Build Images
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make docker-build

      - name: Export Docker Images
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make docker-export

      - name: "Start kind cluster"
        run: |
          kind version
          kind create cluster --wait 3m --image kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e

      - name: "Inspect kind cluster"
        run: |
          kubectl config current-context
          kubectl get node

      - name: Download Operator Image
        uses: actions/download-artifact@v2
        with:
          name: operator-image
          path: ./operator

      - name: Download Lurker Image
        uses: actions/download-artifact@v2
        with:
          name: lurker-image
          path: ./operator

      - name: Import Operator & Lurker Image to kind cluster
        working-directory: ./operator
        run: make kind-import

      - name: Kind Import ${{ matrix.unit }} Image to kind cluster
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make kind-import

      - name: Deploy Operator Chart to kind cluster
        working-directory: ./operator
        run: |
          make helm-deploy

      - name: Deploy ${{ matrix.unit }} Chart to kind cluster
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make deploy

      - name: Deploy Test Dependencies
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make deploy-test-deps

      - name: Start Integration Tests
        working-directory: ./scanners/${{ matrix.unit }}/
        run: make integration-tests

      # ---- Debuging Cluster on Failure ----

      - name: Inspect Post Failure
        if: failure()
        run: |
          echo "List all 'HelmCharts' in all namespaces"
          helm list --all-namespaces
          echo "List all 'Scans' in all namespaces"
          kubectl get scans -o wide --all-namespaces
          echo "List all 'Jobs' in all namespaces"
          kubectl get jobs -o wide --all-namespaces
          echo "List all 'Pods' in all namespaces"
          kubectl get pods -o wide --all-namespaces
          echo "List all 'Services' in all namespaces"
          kubectl get services -o wide --all-namespaces
          echo "Describe Pods in 'integration-tests' namespace"
          kubectl describe pod -n integration-tests

      - name: "Inspect Operator"
        if: failure()
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager

  # ---- Build | Scanners | Custom Scanner | Nightly Build ----

  # This Section contains Scanners that are developed by the secureCodeBox project or require a nightly build
  # The tag for these images will be the Semver of the release

  zap-advanced:
    name: "Zap-advanced integration-test"
    if: ${{ github.event_name == 'schedule' }}
    needs:
      - sdk
      - operator
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        name: Setup Node
        with:
          node-version: ${{ env. NODE_VERSION }}

      - name: Update NPM
        run: npm i -g npm@${{ env.NPM_VERSION }}

      - name: Install Dependencies
        working-directory: ./scanners/zap-advanced/
        run: make install-deps

      - name: Unit Tests
        working-directory: ./scanners/zap-advanced/
        run: make unit-tests

      - name: Download Parser SDK Image
        uses: actions/download-artifact@v2
        with:
          name: parser-sdk-image
          path: /tmp

      - name: Load Parser SDK Image
        run: |
          docker load --input /tmp/parser-sdk.tar
          docker images | grep sdk

      - name: Build Images
        working-directory: ./scanners/zap-advanced/
        run: make docker-build

      - name: Export Docker Images
        working-directory: ./scanners/zap-advanced/
        run: make docker-export

      - name: "Start kind cluster"
        run: |
          kind version
          kind create cluster --wait 3m --image kindest/node:v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e

      - name: "Inspect kind cluster"
        run: |
          kubectl config current-context
          kubectl get node

      - name: Download Operator Image
        uses: actions/download-artifact@v2
        with:
          name: operator-image
          path: ./operator

      - name: Download Lurker Image
        uses: actions/download-artifact@v2
        with:
          name: lurker-image
          path: ./operator

      - name: Import Operator & Lurker Image
        working-directory: ./operator
        run: make kind-import

      - name: Kind Import Images
        working-directory: ./scanners/zap-advanced/
        run: make kind-import

      - name: Install Operator
        working-directory: ./operator
        run: |
          make helm-deploy

      - name: Deploy zap-advanced
        working-directory: ./scanners/zap-advanced/
        run: make deploy

      - name: Deploy Test Dependencies
        working-directory: ./scanners/zap-advanced/
        run: make deploy-test-deps

      - name: Start Integration Tests
        working-directory: ./scanners/zap-advanced/
        run: make integration-tests

      # ---- Debuging Cluster on Failure ----

      - name: Inspect Post Failure
        if: failure()
        run: |
          echo "List all 'HelmCharts' in all namespaces"
          helm list --all-namespaces
          echo "List all 'Scans' in all namespaces"
          kubectl get scans -o wide --all-namespaces
          echo "List all 'Jobs' in all namespaces"
          kubectl get jobs -o wide --all-namespaces
          echo "List all 'Pods' in all namespaces"
          kubectl get pods -o wide --all-namespaces
          echo "List all 'Services' in all namespaces"
          kubectl get services -o wide --all-namespaces
          echo "Describe Pods in 'integration-tests' namespace"
          kubectl describe pod -n integration-tests

      - name: "Inspect Operator"
        if: failure()
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager

      - name: Notify Slack Dev Channel
        if: failure()
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEVELOPMENT_CHANNEL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  # ---- Test | Hooks ----

  test-hooks:
    name: Test |  Hook ${{ matrix.hook }} | k8s ${{ matrix.k8sVersion }}
    needs:
      - operator
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        k8sVersion:
          - v1.24.0@sha256:0866296e693efe1fed79d5e6c7af8df71fc73ae45e3679af05342239cdc5bc8e
          - v1.23.6@sha256:b1fa224cc6c7ff32455e0b1fd9cbfd3d3bc87ecaa8fcb06961ed1afb3db0f9ae
          - v1.22.9@sha256:8135260b959dfe320206eb36b3aeda9cffcb262f4b44cda6b33f7bb73f453105
          - v1.21.12@sha256:f316b33dd88f8196379f38feb80545ef3ed44d9197dca1bfd48bcb1583210207
        hook:
          - cascading-scans
          - generic-webhook
          - persistence-azure-monitor
          # - persistence-elastic # Fails on the CI due to insufficient cpu as mentioned in issue #1165
          - update-field-hook
          - finding-post-processing
          - notification
          # - persistence-static-report (WIP)
    steps:
      - uses: actions/checkout@master
      - name: "Start kind cluster"
        run: |
          kind version
          kind create cluster --image kindest/node:${{ matrix.k8sVersion }} --wait 3m
      - name: "Inspect kind cluster"
        run: |
          kubectl config current-context
          kubectl get node

      # ---- Install Operator & Create Namespaces ----

      - name: Download Operator Image
        uses: actions/download-artifact@v2
        with:
          name: operator-image
          path: ./operator

      - name: Download Lurker Image
        uses: actions/download-artifact@v2
        with:
          name: lurker-image
          path: ./operator

      - name: Import Operator & Lurker Image
        working-directory: ./operator
        run: make kind-import

      - name: "Install Operator"
        working-directory: ./operator
        run: make helm-deploy

      # ---- Operator Health Check ----

      - name: "Inspect Operator"
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Pods in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager

      - name: "Create 'demo-targets' namespace"
        run: "kubectl create namespace demo-targets"

      # ---- Import Parser SDK Artifact

      - name: Download Parser SDK Image
        uses: actions/download-artifact@v2
        with:
          name: parser-sdk-image
          path: /tmp

      - name: Load Parser SDK Image
        run: |
          docker load --input /tmp/parser-sdk.tar
          docker images | grep sdk

      # ---- Import Hook SDK Artifact

      - name: Download Hook SDK Image
        uses: actions/download-artifact@v2
        with:
          name: hook-sdk-image
          path: /tmp

      - name: Load Parser SDK Image
        run: |
          docker load --input /tmp/hook-sdk.tar
          docker images | grep sdk

      # ----- Build Test-Scan ScanType Image ----

      - name: Build Images
        working-directory: ./scanners/test-scan/
        run: make docker-build

      - name: Export Docker Images
        working-directory: ./scanners/test-scan/
        run: make docker-export

      - name: Kind import
        working-directory: ./scanners/test-scan/
        run: make kind-import

      - name: Test-scan deploy
        working-directory: ./scanners/test-scan/
        run: make deploy

      # ----- Build Hook Image ----

      - name: Build Images
        working-directory: ./hooks/${{ matrix.hook }}
        run: make docker-build

      - name: Export Docker Images
        working-directory: ./hooks/${{ matrix.hook }}
        run: make docker-export

      - name: Kind import
        working-directory: ./hooks/${{ matrix.hook }}
        run: make kind-import

      # ---- Install Test Dependencies ----

      - name: "Install Test Dependencies"
        working-directory: ./hooks
        run: npm ci

      # ---- Unit-Test ----

      - name: "Run Unit Tests"
        working-directory: ./hooks/${{ matrix.hook }}
        run: make unit-tests

      # ---- Integration-Test ----

      - name: Deploy ${{ matrix.hook }}
        working-directory: ./hooks/${{ matrix.hook }}
        run: make deploy

      - name: Deploy Test Dependencies
        working-directory: ./hooks/${{ matrix.hook }}
        run: make deploy-test-deps

      - name: "Run Integration Test"
        working-directory: ./hooks/${{ matrix.hook }}
        run: make integration-tests

      # ---- Debuging Cluster on Failure ----

      - name: Inspect Post Failure
        if: failure()
        run: |
          echo "List all 'HelmCharts' in all namespaces"
          helm list --all-namespaces
          echo "List all 'Scans' in all namespaces"
          kubectl get scans -o wide --all-namespaces
          echo "List all 'Jobs' in all namespaces"
          kubectl get jobs -o wide --all-namespaces
          echo "List all 'Pods' in all namespaces"
          kubectl get pods -o wide --all-namespaces
          echo "List all 'Services' in all namespaces"
          kubectl get services -o wide --all-namespaces
          echo "Describe Pods in 'integration-tests' namespace"
          kubectl describe pod -n integration-tests

      - name: "Inspect Operator"
        if: failure()
        run: |
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Deployment in namespace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager

      - name: Test-scan integration-tests
        working-directory: ./scanners/test-scan/
        run: |
          helm -n integration-tests upgrade --install test-scan . \
            --set="scanner.image.repository=docker.io/securecodebox/scanner-test-scan" \
            --set="parser.image.repository=docker.io/securecodebox/parser-test-scan" \
            --set="parser.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="scanner.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="parser.env[0].name=CRASH_ON_FAILED_VALIDATION" \
            --set-string="parser.env[0].value=true"  \
            --set="parser.env[1].name=PRODUCE_INVALID_FINDINGS" \
            --set-string="parser.env[1].value=true"
          make integration-tests

      # ---- Clean UP ----

      - name: "Delete kind cluster"
        run: |
          kind delete cluster
