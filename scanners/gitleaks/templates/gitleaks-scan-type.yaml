# SPDX-FileCopyrightText: 2020 iteratec GmbH
#
# SPDX-License-Identifier: Apache-2.0

apiVersion: "execution.securecodebox.io/v1"
kind: ScanType
metadata:
  name: "gitleaks"
spec:
  extractResults:
    type: gitleaks-json
    location: "/home/securecodebox/report.json"
  jobTemplate:
    spec:
      {{- if .Values.scannerJob.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .Values.scannerJob.ttlSecondsAfterFinished }}
      {{- end }}
      backoffLimit: {{ .Values.scannerJob.backoffLimit }}
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: gitleaks
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              command:
                - 'sh'
                - '/wrapper.sh'
                - "--verbose"
                - "--format"
                - "json"
                - "--report"
                - "/home/securecodebox/report.json"
              resources:
                {{- toYaml .Values.scannerJob.resources | nindent 16 }}
              securityContext:
                {{- toYaml .Values.scannerJob.securityContext | nindent 16 }}
              env:
                {{- toYaml .Values.scannerJob.env | nindent 16 }}
              volumeMounts:
                {{- toYaml .Values.scannerJob.extraVolumeMounts | nindent 16 }}
            {{- if .Values.scannerJob.extraContainers }}
            {{- toYaml .Values.scannerJob.extraContainers | nindent 12 }}
            {{- end }}
          volumes:
            {{- toYaml .Values.scannerJob.extraVolumes | nindent 12 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitleaks-config
data:
  config_all.toml: |-
    title = "gitleaks config"
    [[rules]]
        description = "JWT Token Format"
        regex = '''eyJ[a-zA-Z0-9\-_]{17,}\.[a-zA-Z0-9\-_]{20,}\.[a-zA-Z0-9\-_]{20,}'''
        tags = ["key", "JWT"]

    #TODO need a matcher for other typical hash-types
    [[rules]]
        description = "32 char hash (e.g. MD5 Checksum used for zah payment gateway, or zah-keys)"
        regex = '''=[a-f0-9]{32}[^a-f0-9]'''
        tags = ["key", "Hash", "Generic"]

    [[rules]]
        description = "Format of Artifactory access keys"
        regex = '''[^a-zA-Z0-9]AKC[a-zA-Z0-9]{70}[^a-zA-Z0-9]'''
        tags = ["key", "Artifactory"]

    [[rules]]
        description = "Generic credentials"
        regex = '''(?i)(dbpasswd|api_key|apikey|secret|key|password|passwort|key|token|secret|guid|pw|auth)(.{0,20})?[^\S\r\n]?[:=][^\S\r\n]?["']?([0-9a-zA-Z-_\/+!{}\/=]{6,80})'''
        tags = ["key", "Generic"]
        [[rules.Entropies]]
            Min = "3.8"
            Max = "8.0"
            Group = "3"
        [rules.allowlist]
            regexes = [

                # ***  generic whitelist ***
                # excludes ${...} format
                '''[:=]\s?\"?\'?\${.*?}''',
                # excludes $... format
                '''[:=]\s?\$[a-zA-z0-9_\-]+''',
                # for parameter replacement, url, ...
                '''(env.DOCKER_PASSWORT|credentials\[)''',
                '''https://packages.instana.io/Instana.gpg''',
                '''key=sonar\.(webhooks|forceAuthentication)''',
                '''key=https:\/\/(openresty\.org|packages\.grafana)''',
                '''(key=file:\/\/\/etc\/pki\/rpm-gpg|KEY: \"\$ARTIFACTORY_OPS)''',
                '''(token|TOKEN)\s?=\s?(conn\.assume_role|\(\[a-zA-Z0-9)''',
                '''(key|KEY)=(\/tmp\/helm\/\$VENDO_PROJECT|\$\(_get_key|\"?\/app(-security)?\/secret-service-volume\/tls\.key|\"\$EXTERNAL_CERTIFICATE)''',
                '''(password|PASSWORD)\s?=\s?(getpass\.getpass|\$\(_get_key)''',
                # Ignore JWT - they have an own rule with own whitelist
                '''eyJ[a-zA-Z0-9\-_]{17,}\.[a-zA-Z0-9\-_]{20,}\.[a-zA-Z0-9\-_]{20,}''',
                # Ignore AWS Manager ID rules - they have an own rule with own whitelist
                '''(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}''',
                # Ignore AWS Secret rules - they have an own rule with own whitelist
                '''(?i)aws(.{0,20})?(?-i)['\"]?[0-9a-zA-Z\/+]{40}['\"]?''',
                # Ignore Slack
                '''xox[baprs]-([0-9a-zA-Z]{10,48})''',
                # Ignore mailchimp
                '''(?i)(.{0,20})?['"][0-9a-f]{32}-us[0-9]{1,2}['"]'''
            ]
            #files = [
            #    '''\.java$'''
            #]

    [[rules]]
        description = "AWS Manager ID"
        regex = '''(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}[\"\s]'''
        tags = ["key", "AWS"]

    [[rules]]
        description = "AWS cred file info"
        regex = '''(?i)(aws_access_key_id|aws_secret_access_key)(.{0,20})?=.[0-9a-zA-Z\/+]{20,40}'''
        tags = ["key", "AWS"]

    [[rules]]
        description = "AWS Secret Key"
        regex = '''(?i)aws(.{0,20})?[=:\s](?-i)['\"]?[0-9a-zA-Z\/+]{40}['\"]?'''
        tags = ["key", "AWS"]

    [[rules]]
        description = "AWS MWS key"
        regex = '''amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'''
        tags = ["key", "AWS", "MWS"]


    [[rules]]
        description = "Asymmetric Private Key"
        regex = '''-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----'''
        tags = ["key", "PrivateKey"]
        [rules.allowlist]
            paths = ['''vagrant/\.vagrant\/machines\/default\/virtualbox''']
            description = "SSH key used to connect to local development machine"

    [[rules]]
        description = "Facebook Secret Key"
        regex = '''(?i)(facebook|fb)(.{0,20})?[=:\s](?-i)['\"][0-9a-f]{32}['\"]'''
        tags = ["key", "Facebook"]

    [[rules]]
        description = "Facebook Client ID"
        regex = '''(?i)(facebook|fb)(.{0,20})?[=:\s]['\"][0-9]{13,17}['\"]'''
        tags = ["key", "Facebook"]

    [[rules]]
        description = "Twitter Secret Key"
        regex = '''(?i)twitter(.{0,20})?[=:\s]['\"][0-9a-z]{35,44}['\"]'''
        tags = ["key", "Twitter"]

    [[rules]]
        description = "Twitter Client ID"
        regex = '''(?i)twitter(.{0,20})?[=:\s]['\"][0-9a-z]{18,25}['\"]'''
        tags = ["client", "Twitter"]

    [[rules]]
        description = "Github"
        regex = '''(?i)github(.{0,20})?[=:\s](?-i)['\"][0-9a-zA-Z]{35,40}['\"]'''
        tags = ["key", "Github"]

    [[rules]]
        description = "LinkedIn Client ID"
        regex = '''(?i)linkedin(.{0,20})?[=:\s](?-i)['\"][0-9a-z]{12}['\"]'''
        tags = ["client", "LinkedIn"]

    [[rules]]
        description = "LinkedIn Secret Key"
        regex = '''(?i)linkedin(.{0,20})?[=:\s]['\"][0-9a-z]{16}['\"]'''
        tags = ["secret", "LinkedIn"]

    [[rules]]
        description = "Slack"
        regex = '''xox[baprs]-([0-9a-zA-Z]{10,48})?'''
        tags = ["key", "Slack"]

    [[rules]]
        description = "Google API key"
        regex = '''AIza[0-9A-Za-z\\-_]{35}'''
        tags = ["key", "Google"]


    [[rules]]
        description = "Heroku API key"
        regex = '''(?i)heroku(.{0,20})?['"][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}['"]'''
        tags = ["key", "Heroku"]

    [[rules]]
        description = "MailChimp API key"
        regex = '''(?i)(mailchimp|mc)(.{0,20})?['"][0-9a-f]{32}-us[0-9]{1,2}['"]'''
        tags = ["key", "Mailchimp"]

    [[rules]]
        description = "Mailgun API key"
        regex = '''(?i)(mailgun|mg)(.{0,20})?[=:\s]['"][0-9a-z]{32}['"]'''
        tags = ["key", "Mailgun"]

    [[rules]]
        description = "PayPal Braintree access token"
        regex = '''access_token\$production\$[0-9a-z]{16}\$[0-9a-f]{32}'''
        tags = ["key", "Paypal"]

    [[rules]]
        description = "Picatic API key"
        regex = '''sk_live_[0-9a-z]{32}'''
        tags = ["key", "Picatic"]

    [[rules]]
        description = "Slack Webhook"
        regex = '''https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'''
        tags = ["key", "Slack"]

    #TODO Optimize
    [[rules]]
        description = "Teams Webhook"
        regex = '''https://outlook.office.com/webhook/.{1,120}'''
        tags = ["key", "Teams"]

    #TODO Optimize
    [[rules]]
        description = "Jenkins Webhook"
        regex = '''https://.{6,100}/generic-webhook-trigger/invoke'''
        tags = ["key", "Jenkins"]

    [[rules]]
        description = "Stripe API key"
        regex = '''(?i)stripe(.{0,20})?[=:\s]['\"][sk|rk]_live_[0-9a-zA-Z]{24}'''
        tags = ["key", "Stripe"]

    [[rules]]
        description = "Square access token"
        regex = '''sq0atp-[0-9A-Za-z\-_]{22}'''
        tags = ["key", "Square"]

    [[rules]]
        description = "Square OAuth secret"
        regex = '''sq0csp-[0-9A-Za-z\\-_]{43}'''
        tags = ["key", "Square"]

    [[rules]]
        description = "Twilio API key"
        regex = '''(?i)twilio(.{0,20})?['\"][0-9a-f]{32}['\"]'''
        tags = ["key", "Twilio"]

    [[rules]]
        description = "File names with potential keys and credentials"
        file = '''(?i)(id_rsa|id_dsa|id_ed25519|id_ecdsa|passwd|pgpass|pem|key|shadow
                    |npmrc_auth|s3cfg|dockercfg|wp-config\.php|htpasswd|env|git-credentials|tugboat|netrc|_netrc|ftpconfig
                    |remote-sync\.json|sftp\.json|sftp-config\.json|webservers\.xml|logins\.json|dbeaver-data-sources\.xml
                    |sshd_config|sh_history|history|bash_history|dhcpd\.conf|connections\.xml|pgpass|secret_token\.rb
                    |credentials\.xml|robomongo\.json|terraform\.tfvars)'''
        tags = ["key", "FileName"]

    [[rules]]
        description = "File extension with potential keys and credentials"
        file = '''(?i)\.(pem|ppk|bashrc|pkcs12|p12|pfx|asc|ovpn|cscfg|rdp|mdf|sdf|sqlite|sqlite3|bek
                    |tpm|fve|jks|psafe3|keychain|pcap|gnucash|kwallet|tblk|s3cfg|kdbx|sqldumb|htpasswd|dockercfg)'''
        tags = ["key", "FileExtension"]

    [allowlist]
        description = "Whitelisted files"
        files = [
            '''^.*gitleaks(config)?.*\.toml$''',
            '''(.*?)(jpg|gif|doc|pdf|jepg|png|bin|yarn\.lock|svg)$''',
            '''(go\.mod|go\.sum)$''',
            '''(swagger-ui.*)(js|css|map)$''',
            '''package-lock\.json'''
        ]
        paths = ["node_modules"]

  config_no_generics.toml: |-
    title = "gitleaks config"
    [[rules]]
        description = "JWT Token Format"
        regex = '''eyJ[a-zA-Z0-9\-_]{17,}\.[a-zA-Z0-9\-_]{20,}\.[a-zA-Z0-9\-_]{20,}'''
        tags = ["key", "JWT"]

    [[rules]]
        description = "Format of Artifactory access keys"
        regex = '''[^a-zA-Z0-9]AKC[a-zA-Z0-9]{70}[^a-zA-Z0-9]'''
        tags = ["key", "Artifactory"]

    [[rules]]
        description = "AWS Manager ID"
        regex = '''(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}[\"\s]'''
        tags = ["key", "AWS"]

    [[rules]]
        description = "AWS cred file info"
        regex = '''(?i)(aws_access_key_id|aws_secret_access_key)(.{0,20})?=.[0-9a-zA-Z\/+]{20,40}'''
        tags = ["key", "AWS"]

    [[rules]]
        description = "AWS Secret Key"
        regex = '''(?i)aws(.{0,20})?[=:\s](?-i)['\"]?[0-9a-zA-Z\/+]{40}['\"]?'''
        tags = ["key", "AWS"]

    [[rules]]
        description = "AWS MWS key"
        regex = '''amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'''
        tags = ["key", "AWS", "MWS"]


    [[rules]]
        description = "Asymmetric Private Key"
        regex = '''-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----'''
        tags = ["key", "PrivateKey"]
        [rules.allowlist]
            paths = ['''vagrant/\.vagrant\/machines\/default\/virtualbox''']
            description = "SSH key used to connect to local development machine"

    [[rules]]
        description = "Facebook Secret Key"
        regex = '''(?i)(facebook|fb)(.{0,20})?[=:\s](?-i)['\"][0-9a-f]{32}['\"]'''
        tags = ["key", "Facebook"]

    [[rules]]
        description = "Facebook Client ID"
        regex = '''(?i)(facebook|fb)(.{0,20})?[=:\s]['\"][0-9]{13,17}['\"]'''
        tags = ["key", "Facebook"]

    [[rules]]
        description = "Twitter Secret Key"
        regex = '''(?i)twitter(.{0,20})?[=:\s]['\"][0-9a-z]{35,44}['\"]'''
        tags = ["key", "Twitter"]

    [[rules]]
        description = "Twitter Client ID"
        regex = '''(?i)twitter(.{0,20})?[=:\s]['\"][0-9a-z]{18,25}['\"]'''
        tags = ["client", "Twitter"]

    [[rules]]
        description = "Github"
        regex = '''(?i)github(.{0,20})?[=:\s](?-i)['\"][0-9a-zA-Z]{35,40}['\"]'''
        tags = ["key", "Github"]

    [[rules]]
        description = "LinkedIn Client ID"
        regex = '''(?i)linkedin(.{0,20})?[=:\s](?-i)['\"][0-9a-z]{12}['\"]'''
        tags = ["client", "LinkedIn"]

    [[rules]]
        description = "LinkedIn Secret Key"
        regex = '''(?i)linkedin(.{0,20})?[=:\s]['\"][0-9a-z]{16}['\"]'''
        tags = ["secret", "LinkedIn"]

    [[rules]]
        description = "Slack"
        regex = '''xox[baprs]-([0-9a-zA-Z]{10,48})?'''
        tags = ["key", "Slack"]

    [[rules]]
        description = "Google API key"
        regex = '''AIza[0-9A-Za-z\\-_]{35}'''
        tags = ["key", "Google"]


    [[rules]]
        description = "Heroku API key"
        regex = '''(?i)heroku(.{0,20})?['"][0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}['"]'''
        tags = ["key", "Heroku"]

    [[rules]]
        description = "MailChimp API key"
        regex = '''(?i)(mailchimp|mc)(.{0,20})?['"][0-9a-f]{32}-us[0-9]{1,2}['"]'''
        tags = ["key", "Mailchimp"]

    [[rules]]
        description = "Mailgun API key"
        regex = '''(?i)(mailgun|mg)(.{0,20})?[=:\s]['"][0-9a-z]{32}['"]'''
        tags = ["key", "Mailgun"]

    [[rules]]
        description = "PayPal Braintree access token"
        regex = '''access_token\$production\$[0-9a-z]{16}\$[0-9a-f]{32}'''
        tags = ["key", "Paypal"]

    [[rules]]
        description = "Picatic API key"
        regex = '''sk_live_[0-9a-z]{32}'''
        tags = ["key", "Picatic"]

    [[rules]]
        description = "Slack Webhook"
        regex = '''https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'''
        tags = ["key", "Slack"]

    #TODO Optimize
    [[rules]]
        description = "Teams Webhook"
        regex = '''https://outlook.office.com/webhook/.{1,120}'''
        tags = ["key", "Teams"]

    #TODO Optimize
    [[rules]]
        description = "Jenkins Webhook"
        regex = '''https://.{6,100}/generic-webhook-trigger/invoke'''
        tags = ["key", "Jenkins"]

    [[rules]]
        description = "Stripe API key"
        regex = '''(?i)stripe(.{0,20})?[=:\s]['\"][sk|rk]_live_[0-9a-zA-Z]{24}'''
        tags = ["key", "Stripe"]

    [[rules]]
        description = "Square access token"
        regex = '''sq0atp-[0-9A-Za-z\-_]{22}'''
        tags = ["key", "Square"]

    [[rules]]
        description = "Square OAuth secret"
        regex = '''sq0csp-[0-9A-Za-z\\-_]{43}'''
        tags = ["key", "Square"]

    [[rules]]
        description = "Twilio API key"
        regex = '''(?i)twilio(.{0,20})?['\"][0-9a-f]{32}['\"]'''
        tags = ["key", "Twilio"]

    [allowlist]
        description = "Whitelisted files"
        files = [
            '''^.*gitleaks(config)?.*\.toml$''',
            '''(.*?)(jpg|gif|doc|pdf|jepg|png|bin|yarn\.lock|svg)$''',
            '''(go\.mod|go\.sum)$''',
            '''(swagger-ui.*)(js|css|map)$''',
            '''package-lock\.json'''
        ]
        paths = ["node_modules"]

  config_filenames_only.toml: |-
    title = "gitleaks config"

    [[rules]]
        description = "File names with potential keys and credentials"
        file = '''(?i)(id_rsa|id_dsa|id_ed25519|id_ecdsa|passwd|pgpass|pem|key|shadow
                    |npmrc_auth|s3cfg|dockercfg|wp-config\.php|htpasswd|env|git-credentials|tugboat|netrc|_netrc|ftpconfig
                    |remote-sync\.json|sftp\.json|sftp-config\.json|webservers\.xml|logins\.json|dbeaver-data-sources\.xml
                    |sshd_config|sh_history|history|bash_history|dhcpd\.conf|connections\.xml|pgpass|secret_token\.rb
                    |credentials\.xml|robomongo\.json|terraform\.tfvars)'''
        tags = ["key", "FileName"]

    [[rules]]
        description = "File extension with potential keys and credentials"
        file = '''(?i)\.(pem|ppk|bashrc|pkcs12|p12|pfx|asc|ovpn|cscfg|rdp|mdf|sdf|sqlite|sqlite3|bek
                    |tpm|fve|jks|psafe3|keychain|pcap|gnucash|kwallet|tblk|s3cfg|kdbx|sqldumb|htpasswd|dockercfg)'''
        tags = ["key", "FileExtension"]



    [allowlist]
        description = "Whitelisted files"
        files = [
            '''^.*gitleaks(config)?.*\.toml$''',
            '''(.*?)(jpg|gif|doc|pdf|jepg|png|bin|yarn\.lock|svg)$''',
            '''(go\.mod|go\.sum)$''',
            '''(swagger-ui.*)(js|css|map)$''',
            '''package-lock\.json'''
        ]
        paths = ["node_modules"]




