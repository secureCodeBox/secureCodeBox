# SPDX-FileCopyrightText: the secureCodeBox authors
#
# SPDX-License-Identifier: Apache-2.0

[
    {
        "name": "Cross Site Scripting (DOM Based)",
        "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
        "hint": null,
        "category": "Cross Site Scripting (DOM Based)",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "HIGH",
        "references": [
            {
                "type": "URL",
                "value": "https://owasp.org/www-community/attacks/xss/"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/79.html"
            },
            {
                "type": "CWE",
                "value": "CWE-79"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/79.html"
            }
        ],
        "mitigation": "Phase: Architecture and DesignUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.Phases: Implementation; Architecture and DesignUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.Phase: Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.Phase: ImplementationFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\t",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "3",
            "zap_count": "1",
            "zap_solution": "Phase: Architecture and DesignUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.Phases: Implementation; Architecture and DesignUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.Phase: Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.Phase: ImplementationFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\t",
            "zap_otherinfo": "Tag name: input Att name:  Att id: ",
            "zap_reference": "https://owasp.org/www-community/attacks/xss/https://cwe.mitre.org/data/definitions/79.html",
            "zap_cweid": "79",
            "zap_wascid": "8",
            "zap_riskcode": "3",
            "zap_pluginid": "40026",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp#jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(5397) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert(5397)//>\\x3e",
                    "method": "GET",
                    "param": "",
                    "attack": "#jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(5397) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert(5397)//>\\x3e",
                    "evidence": "",
                    "otherinfo": "Tag name: input Att name:  Att id: "
                }
            ]
        },
        "id": "a5353427-2555-47a7-8289-f1f6b73aa42c",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    },
    {
        "name": "Cross Site Scripting (Reflected)",
        "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
        "hint": null,
        "category": "Cross Site Scripting (Reflected)",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "HIGH",
        "references": [
            {
                "type": "URL",
                "value": "https://owasp.org/www-community/attacks/xss/"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/79.html"
            },
            {
                "type": "CWE",
                "value": "CWE-79"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/79.html"
            }
        ],
        "mitigation": "Phase: Architecture and DesignUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.Phases: Implementation; Architecture and DesignUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.Phase: Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.Phase: ImplementationFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\t",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "2",
            "zap_count": "1",
            "zap_solution": "Phase: Architecture and DesignUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.Phases: Implementation; Architecture and DesignUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.Phase: Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.Phase: ImplementationFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\t",
            "zap_otherinfo": null,
            "zap_reference": "https://owasp.org/www-community/attacks/xss/https://cwe.mitre.org/data/definitions/79.html",
            "zap_cweid": "79",
            "zap_wascid": "8",
            "zap_riskcode": "3",
            "zap_pluginid": "40012",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp?q=%3C%2Ffont%3E%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E%3Cfont%3E",
                    "method": "GET",
                    "param": "q",
                    "attack": "</font><scrIpt>alert(1);</scRipt><font>",
                    "evidence": "</font><scrIpt>alert(1);</scRipt><font>",
                    "otherinfo": ""
                }
            ]
        },
        "id": "8fe6663f-1c26-49dd-bffc-84dae0b83edd",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    },
    {
        "name": "SQL Injection",
        "description": "SQL injection may be possible.",
        "hint": null,
        "category": "SQL Injection",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "HIGH",
        "references": [
            {
                "type": "URL",
                "value": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"
            },
            {
                "type": "CWE",
                "value": "CWE-89"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/89.html"
            }
        ],
        "mitigation": "Do not trust client side input, even if there is client side validation in place.In general, type check all data on the server side.If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.If database Stored Procedures can be used, use them.Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!Do not create dynamic SQL queries using simple string concatenation.Escape all data received from the client.Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.Apply the principle of least privilege by using the least privileged database user possible.In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.Grant the minimum database access that is necessary for the application.",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "2",
            "zap_count": "1",
            "zap_solution": "Do not trust client side input, even if there is client side validation in place.In general, type check all data on the server side.If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.If database Stored Procedures can be used, use them.Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!Do not create dynamic SQL queries using simple string concatenation.Escape all data received from the client.Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.Apply the principle of least privilege by using the least privileged database user possible.In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.Grant the minimum database access that is necessary for the application.",
            "zap_otherinfo": "The original page results were successfully replicated using the expression [19-2] as the parameter valueThe parameter value being modified was stripped from the HTML output for the purposes of the comparison",
            "zap_reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
            "zap_cweid": "89",
            "zap_wascid": "19",
            "zap_riskcode": "3",
            "zap_pluginid": "40018",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "productid",
                    "attack": "19-2",
                    "evidence": "",
                    "otherinfo": "The original page results were successfully replicated using the expression [19-2] as the parameter value\nThe parameter value being modified was stripped from the HTML output for the purposes of the comparison"
                }
            ]
        },
        "id": "c4c509d7-f067-49c8-90fb-8dacb75dde22",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    },
    {
        "name": "Absence of Anti-CSRF Tokens",
        "description": "No Anti-CSRF tokens were found in a HTML submission form.A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.CSRF attacks are effective in a number of situations, including:    * The victim has an active session on the target site.    * The victim is authenticated via HTTP auth on the target site.    * The victim is on the same local network as the target site.CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
        "hint": null,
        "category": "Absence of Anti-CSRF Tokens",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "MEDIUM",
        "references": [
            {
                "type": "URL",
                "value": "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/352.html"
            },
            {
                "type": "CWE",
                "value": "CWE-352"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/352.html"
            }
        ],
        "mitigation": "Phase: Architecture and DesignUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, use anti-CSRF packages such as the OWASP CSRFGuard.Phase: ImplementationEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.Phase: Architecture and DesignGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).Note that this can be bypassed using XSS.Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.Note that this can be bypassed using XSS.Use the ESAPI Session Management control.This control includes a component for CSRF.Do not use the GET method for any request that triggers a state change.Phase: ImplementationCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "1",
            "zap_count": "47",
            "zap_solution": "Phase: Architecture and DesignUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, use anti-CSRF packages such as the OWASP CSRFGuard.Phase: ImplementationEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.Phase: Architecture and DesignGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).Note that this can be bypassed using XSS.Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.Note that this can be bypassed using XSS.Use the ESAPI Session Management control.This control includes a component for CSRF.Do not use the GET method for any request that triggers a state change.Phase: ImplementationCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
            "zap_otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"desc\" \"price\" \"product\" \"type\" ].",
            "zap_reference": "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.htmlhttps://cwe.mitre.org/data/definitions/352.html",
            "zap_cweid": "352",
            "zap_wascid": "9",
            "zap_riskcode": "2",
            "zap_pluginid": "10202",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/advanced.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form id=\"advanced\" name=\"advanced\" method=\"POST\" onsubmit=\"return validateForm(this);false;\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"desc\" \"price\" \"product\" \"type\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/advanced.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form id=\"query\" name=\"advanced\" method=\"POST\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 2: \"q\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/login.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form method=\"POST\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"password\" \"submit\" \"username\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=1",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=10",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=11",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=12",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=13",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=14",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=15",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=16",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=17",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=18",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=19",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=2",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=20",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=21",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=22",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=23",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=24",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=25",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=26",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=27",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=28",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=29",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=3",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=30",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=31",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=32",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=4",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=5",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=6",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=9",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"price\" \"productid\" \"quantity\" \"submit\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/register.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<form method=\"POST\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"password1\" \"password2\" \"submit\" \"username\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "<FORM name='query' method='GET'>",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"q\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_14\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_16\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_17\" \"quantity_26\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_18\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_21\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_22\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_26\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_32\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"quantity_5\" \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form action=\"basket.jsp\" method=\"post\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"update\" ]."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/login.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "<form method=\"POST\">",
                    "otherinfo": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"password\" \"submit\" \"username\" ]."
                }
            ]
        },
        "id": "6be50f6c-d4d3-4587-a5fd-168ce230383d",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    },
    {
        "name": "Content Security Policy (CSP) Header Not Set",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "hint": null,
        "category": "Content Security Policy (CSP) Header Not Set",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "MEDIUM",
        "references": [
            {
                "type": "URL",
                "value": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy"
            },
            {
                "type": "URL",
                "value": "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html"
            },
            {
                "type": "URL",
                "value": "https://www.w3.org/TR/CSP/"
            },
            {
                "type": "URL",
                "value": "https://w3c.github.io/webappsec-csp/"
            },
            {
                "type": "URL",
                "value": "https://web.dev/articles/csp"
            },
            {
                "type": "URL",
                "value": "https://caniuse.com/#feat=contentsecuritypolicy"
            },
            {
                "type": "URL",
                "value": "https://content-security-policy.com/"
            },
            {
                "type": "CWE",
                "value": "CWE-693"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/693.html"
            }
        ],
        "mitigation": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "3",
            "zap_count": "52",
            "zap_solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
            "zap_otherinfo": null,
            "zap_reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policyhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.htmlhttps://www.w3.org/TR/CSP/https://w3c.github.io/webappsec-csp/https://web.dev/articles/csphttps://caniuse.com/#feat=contentsecuritypolicyhttps://content-security-policy.com/",
            "zap_cweid": "693",
            "zap_wascid": "15",
            "zap_riskcode": "2",
            "zap_pluginid": "10038",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/about.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/admin.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/advanced.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/contact.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/home.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/login.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=1",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=10",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=11",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=12",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=13",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=14",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=15",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=16",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=17",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=18",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=19",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=2",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=20",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=21",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=22",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=23",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=24",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=25",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=26",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=27",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=28",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=29",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=3",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=30",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=31",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=32",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=4",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=5",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=6",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=9",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=1",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=2",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=3",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=4",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=5",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=6",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=7",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/register.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/score.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp?q=ZAP",
                    "method": "GET",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/contact.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/login.jsp",
                    "method": "POST",
                    "param": "",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                }
            ]
        },
        "id": "ff421a04-981b-4259-a2a9-a403fd4dbb13",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    },
    {
        "name": "Missing Anti-clickjacking Header",
        "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
        "hint": null,
        "category": "Missing Anti-clickjacking Header",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "MEDIUM",
        "references": [
            {
                "type": "URL",
                "value": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"
            },
            {
                "type": "CWE",
                "value": "CWE-1021"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/1021.html"
            }
        ],
        "mitigation": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "2",
            "zap_count": "52",
            "zap_solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
            "zap_otherinfo": null,
            "zap_reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
            "zap_cweid": "1021",
            "zap_wascid": "15",
            "zap_riskcode": "2",
            "zap_pluginid": "10020",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/about.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/admin.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/advanced.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/contact.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/home.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/login.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=1",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=10",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=11",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=12",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=13",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=14",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=15",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=16",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=17",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=18",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=19",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=2",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=20",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=21",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=22",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=23",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=24",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=25",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=26",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=27",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=28",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=29",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=3",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=30",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=31",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=32",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=4",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=5",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=6",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=9",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=1",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=2",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=3",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=4",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=5",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=6",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=7",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/register.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/score.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp?q=ZAP",
                    "method": "GET",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/contact.jsp",
                    "method": "POST",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/login.jsp",
                    "method": "POST",
                    "param": "x-frame-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": ""
                }
            ]
        },
        "id": "ac518fcd-fe66-4a2d-ab86-1006f5d93683",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    },
    {
        "name": "Cookie No HttpOnly Flag",
        "description": "A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.",
        "hint": null,
        "category": "Cookie No HttpOnly Flag",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "LOW",
        "references": [
            {
                "type": "URL",
                "value": "https://owasp.org/www-community/HttpOnly"
            },
            {
                "type": "CWE",
                "value": "CWE-1004"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/1004.html"
            }
        ],
        "mitigation": "Ensure that the HttpOnly flag is set for all cookies.",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "2",
            "zap_count": "1",
            "zap_solution": "Ensure that the HttpOnly flag is set for all cookies.",
            "zap_otherinfo": null,
            "zap_reference": "https://owasp.org/www-community/HttpOnly",
            "zap_cweid": "1004",
            "zap_wascid": "13",
            "zap_riskcode": "1",
            "zap_pluginid": "10010",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "b_id",
                    "attack": "",
                    "evidence": "Set-Cookie: b_id",
                    "otherinfo": ""
                }
            ]
        },
        "id": "a0340540-a3c9-4bb6-9f5d-c3559dc1b51e",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    },
    {
        "name": "Cookie without SameSite Attribute",
        "description": "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
        "hint": null,
        "category": "Cookie without SameSite Attribute",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "LOW",
        "references": [
            {
                "type": "URL",
                "value": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site"
            },
            {
                "type": "CWE",
                "value": "CWE-1275"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/1275.html"
            }
        ],
        "mitigation": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "2",
            "zap_count": "1",
            "zap_solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
            "zap_otherinfo": null,
            "zap_reference": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site",
            "zap_cweid": "1275",
            "zap_wascid": "13",
            "zap_riskcode": "1",
            "zap_pluginid": "10054",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "b_id",
                    "attack": "",
                    "evidence": "Set-Cookie: b_id",
                    "otherinfo": ""
                }
            ]
        },
        "id": "003678f7-1e8b-46c6-b229-12a13f66896c",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    },
    {
        "name": "X-Content-Type-Options Header Missing",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "hint": null,
        "category": "X-Content-Type-Options Header Missing",
        "location": "http://bodgeit.default.svc:8080",
        "osi_layer": "APPLICATION",
        "severity": "LOW",
        "references": [
            {
                "type": "URL",
                "value": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)"
            },
            {
                "type": "URL",
                "value": "https://owasp.org/www-community/Security_Headers"
            },
            {
                "type": "CWE",
                "value": "CWE-693"
            },
            {
                "type": "URL",
                "value": "https://cwe.mitre.org/data/definitions/693.html"
            }
        ],
        "mitigation": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "attributes": {
            "hostname": "bodgeit.default.svc",
            "port": "8080",
            "zap_confidence": "2",
            "zap_count": "52",
            "zap_solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
            "zap_otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.At \"High\" threshold this scan rule will not alert on client or server error responses.",
            "zap_reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)https://owasp.org/www-community/Security_Headers",
            "zap_cweid": "693",
            "zap_wascid": "15",
            "zap_riskcode": "1",
            "zap_pluginid": "10021",
            "zap_finding_urls": [
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/about.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/admin.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/advanced.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/contact.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/home.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/login.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=1",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=10",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=11",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=12",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=13",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=14",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=15",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=16",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=17",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=18",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=19",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=2",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=20",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=21",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=22",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=23",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=24",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=25",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=26",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=27",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=28",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=29",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=3",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=30",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=31",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=32",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=4",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=5",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=6",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?prodid=9",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=1",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=2",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=3",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=4",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=5",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=6",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/product.jsp?typeid=7",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/register.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/score.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/search.jsp?q=ZAP",
                    "method": "GET",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/basket.jsp",
                    "method": "POST",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/contact.jsp",
                    "method": "POST",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                },
                {
                    "uri": "http://bodgeit.default.svc:8080/bodgeit/login.jsp",
                    "method": "POST",
                    "param": "x-content-type-options",
                    "attack": "",
                    "evidence": "",
                    "otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
                }
            ]
        },
        "id": "574c122f-e957-4ea4-9d0b-cdec01441ef0",
        "parsed_at": "2024-04-09T09:05:27.822Z"
    }
]